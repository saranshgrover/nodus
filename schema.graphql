# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Activity {
  _id: ObjectId!
  activityCode: String!
  childActivities: [ChildActivity!]!
  endTime: String!
  extensions: [Extension!]!
  id: Int!
  name: String!
  ongoing: Boolean
  scrambleSetId: Int!
  startTime: String!
}

input ActivityInput {
  _id: ObjectId!
  activityCode: String!
  childActivities: [ChildActivityInput!]!
  endTime: String!
  extensions: [ExtensionInput!]!
  id: Int!
  name: String!
  ongoing: Boolean = false
  scrambleSetId: Int!
  startTime: String!
}

type ActivityWithPerons {
  _id: ObjectId!
  activityCode: String!
  childActivities: [ChildActivityWithPersons!]!
  endTime: String!
  extensions: [Extension!]!
  id: Int!
  name: String!
  ongoing: Boolean
  room: RoomWithoutActivties!
  scrambleSetId: Int!
  startTime: String!
}

type AdvancementCondition {
  _id: ObjectId!
  level: [Int!]!
  type: String!
}

input AdvancementConditionInput {
  _id: ObjectId!
  level: [Int!]!
  type: String!
}

type Assignment {
  _id: ObjectId!
  activityId: Int!
  assignmentCode: String!
  stationNumber: Int
}

type Attempt {
  _id: ObjectId!
  reconstruction: String!
  result: Int!
}

type Avatar {
  _id: ObjectId!
  thumbUrl: String!
  url: String!
}

type ChildActivity {
  _id: ObjectId!
  activityCode: String!
  endTime: String!
  extensions: [Extension!]!
  id: Int!
  name: String!
  ongoing: Boolean
  scrambleSetId: Int!
  startTime: String!
}

input ChildActivityInput {
  _id: ObjectId!
  activityCode: String!
  endTime: String!
  extensions: [ExtensionInput!]!
  id: Int!
  name: String!
  ongoing: Boolean = false
  scrambleSetId: Int!
  startTime: String!
}

type ChildActivityWithPersons {
  _id: ObjectId!
  activityCode: String!
  endTime: String!
  extensions: [Extension!]!
  id: Int!
  name: String!
  next: ChildActivity
  ongoing: Boolean
  persons: [Person!]!
  scrambleSetId: Int!
  startTime: String!
}

type Competition {
  competitionId: String!
  competitionType: String!
  endDate: String!
  notifications: [Notification!]
  roles: [String!]!
  startDate: String!
}

type Cutoff {
  _id: ObjectId!
  attemptResult: [Int!]!
  numberOfAttempts: Int!
}

input CutoffInput {
  _id: ObjectId!
  attemptResult: [Int!]!
  numberOfAttempts: Int!
}

type Event {
  _id: ObjectId!
  competitorLimit: Int!
  extensions: [Extension!]!
  id: String!
  qualification: Qualification!
  rounds: [Round!]!
}

type Extension {
  _id: ObjectId!
  data: String!
  id: String!
  specUrl: String!
}

input ExtensionInput {
  _id: ObjectId!
  data: String!
  id: String!
  specUrl: String!
}

type ExternalConnection {
  accessToken: String!
  connectionType: String!
  content: WCAContent!
}

input GroupInfo {
  activityCode: String
  id: Int!
  parentId: Int
}

type Keys {
  auth: String!
  p256dh: String!
}

input KeysInput {
  auth: String!
  p256dh: String!
}

type Mutation {
  """
  Clears the database. Only works in development when server is running locally.
  """
  clearDatabase: Boolean!
  createWcif(competitionId: String!): Wcif!
  deleteWcif(competitionId: String!): Wcif!
  subscribeMe(subscription: UserPushSubscription!): Boolean!
  synchronize(competitionId: String!): Wcif
  updateOngoingGroups(closeGroups: [GroupInfo!] = [], competitionId: String!, newGroups: [GroupInfo!] = []): [ActivityWithPerons!]!
  updateUser(data: UpdateUserInput!): User
  updateWcifCompetitors(competitionId: String!, competitors: [NewPersonInput!]!): Wcif!
  updateWcifEvents(competitionId: String!, events: [UpdateEventInput!]!): Wcif!
  updateWcifInfo(competitionId: String!, newCompetitorLimit: Int!, newName: String!, newShortName: String!): Wcif!
  updateWcifSchedule(competitionId: String!, schedule: ScheduleInput!): Wcif!
  updateWcifSettings(competitionId: String!, settings: SettingInput!): Wcif!
}

input NewPersonInput {
  _id: ObjectId!
  birthdate: String!
  countryIso2: String!
  email: String!
  gender: String!
  name: String!
  registrantId: Int
  wcaId: String
  wcaUserId: Int!
}

type Notification {
  _id: ObjectId!
  actions: [String!]
  badge: String
  body: String
  icon: String
  image: String
  timestamp: Float!
  title: String
  url: String
  vibrate: [Int!]
}

"""Mongo object id scalar type"""
scalar ObjectId

type Person {
  _id: ObjectId!
  assignments: [Assignment!]!
  avatar: Avatar!
  birthdate: String
  countryIso2: String!
  email: String
  gender: String!
  name: String!
  personalBests: [PersonalBest!]!
  registrantId: Int
  registration: Registration!
  roles: [String!]!
  subscribers: [UserSubscription!]!
  wcaId: String
  wcaUserId: Int!
}

type PersonalBest {
  _id: ObjectId!
  best: Int!
  continentalRanking: Int!
  eventId: String!
  nationalRanking: Int!
  type: String!
  worldRanking: Int!
}

type Qualification {
  _id: ObjectId!
  attemptResult: [Int!]!
  type: String!
  when: String!
}

input QualificationInput {
  _id: ObjectId!
  attemptResult: [Int!]!
  type: String!
  when: String!
}

type Query {
  findMyManagableCompetitions: [WcifFetch!]!
  getAllWcifs: [Wcif!]!

  """
  Returns the current logged in User. If no user is logged in, returns Null
  """
  getMe: User
  getMyNotifications(competitionId: String!): [Notification!]!
  getMyUpcomingCompetitions: [Wcif!]!
  getOngoingGroups(competitionId: String!): [ActivityWithPerons!]!
  getOpenRounds(competitionId: String!): [Round!]!
  getTopCompetitors(competitionId: String!, top: Int!): [Person!]!
  getUser(id: ObjectId!): User
  getWcifByCompetitionId(competitionId: String!): Wcif
  getWcifById(_id: ObjectId!): Wcif!
}

type Registration {
  _id: ObjectId!
  comments: String
  eventIds: [String!]!
  guests: Int
  status: String!
  wcaRegistrationId: Int!
}

type Result {
  _id: ObjectId!
  attempts: [Attempt!]!
  average: Int!
  best: Int!
  personId: String!
  ranking: Int!
}

type Room {
  _id: ObjectId!
  activities: [Activity!]!
  color: String!
  extensions: [Extension!]!
  id: Int!
  name: String!
}

input RoomInput {
  _id: ObjectId!
  activities: [ActivityInput!]!
  color: String!
  extensions: [ExtensionInput!]!
  id: Int!
  name: String!
}

type RoomWithoutActivties {
  _id: ObjectId!
  color: String!
  extensions: [Extension!]!
  id: Int!
  name: String!
}

type Round {
  _id: ObjectId!
  advancementCondition: AdvancementCondition!
  cutoff: Cutoff!
  extensions: [Extension!]!
  format: String!
  id: String!
  results: [Result!]!
  scrambleSetCount: Int!
  scrambleSets: [ScrambleSet!]!
  timeLimit: [TimeLimit!]!
}

type Schedule {
  _id: ObjectId!
  numberOfDays: Int!
  startDate: String!
  venues: [Venue!]!
}

input ScheduleInput {
  _id: ObjectId!
  numberOfDays: Int!
  startDate: String!
  venues: [VenueInput!]!
}

type ScrambleSet {
  _id: ObjectId!
  extraScrambles: [String!]!
  id: String!
  scrambles: [String!]!
}

type Setting {
  _id: ObjectId!
  colorTheme: String!
  imageUrl: String!
  message: String!
}

input SettingInput {
  _id: ObjectId!
  colorTheme: String!
  imageUrl: String!
  message: String!
}

type TimeLimit {
  _id: ObjectId!
  centiseconds: Int!
  cumulativeRoundIds: [String!]!
}

input TimeLimitInput {
  _id: ObjectId!
  centiseconds: Int!
  cumulativeRoundIds: [String!]!
}

input UpdateEventInput {
  competitorLimit: Int!
  id: String!
  qualification: QualificationInput!
  rounds: [UpdateRoundInput!]!
}

input UpdateRoundInput {
  advancementCondition: AdvancementConditionInput!
  cutoff: CutoffInput!
  format: String!
  id: String!
  scrambleSetCount: Int!
  timeLimit: [TimeLimitInput!]!
}

input UpdateUserInput {
  _id: ObjectId!
  newEmail: String!
  newName: String!
  newUsername: String!
}

type User {
  _id: ObjectId!
  competitions: [Competition!]!
  connections: [ExternalConnection!]!
  email: String!
  name: String!
  primaryAuthenticationType: String!
  subscriptions: [UserPushSubscriptionInput!]!
  username: String!
}

input UserPushSubscription {
  browser: String
  device: String
  endpoint: String!
  keys: KeysInput!
}

type UserPushSubscriptionInput {
  browser: String
  device: String
  endpoint: String!
  keys: Keys!
}

type UserSubscription {
  _id: ObjectId!
  connections: [ExternalConnection!]!
  name: String!
  subscriptions: [UserPushSubscriptionInput!]!
  username: String!
}

type Venue {
  _id: ObjectId!
  countryIso2: String!
  extension: [Extension!]!
  id: Int!
  latitudeMicrodegrees: Int!
  longitudeMicrodegrees: Int!
  name: String!
  rooms: [Room!]!
  timezone: String!
}

input VenueInput {
  _id: ObjectId!
  countryIso2: String!
  extension: [ExtensionInput!]!
  id: Int!
  latitudeMicrodegrees: Int!
  longitudeMicrodegrees: Int!
  name: String!
  rooms: [RoomInput!]!
  timezone: String!
}

type WCAContent {
  birthdate: String!
  delegateStatus: String!
  id: Int!
  photos: [String!]!
  teams: [WCATeams!]!
  wcaId: String
}

type WCATeams {
  friendlyId: String!
  leader: Boolean!
}

type Wcif {
  _id: ObjectId!
  competitionId: String!
  competitorLimit: Int!
  events: [Event!]!
  extensions: [Extension!]!
  locationName: String!
  name: String!
  persons: [Person!]!
  registrationClose: String!
  registrationOpen: String!
  schedule: Schedule!
  settings: Setting!
  shortName: String!
  synchronizedAt: Float!
}

type WcifFetch {
  competitionId: String!
  country_iso2: String!
  end_date: String!
  name: String!
  start_date: String!
}
